name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN   }}
        with:
          publish: npm run publish

  build-and-push-image:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published == 'true'
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
      DOMAIN: ${{ matrix.environment == 'development' && vars.DOMAIN_NAME_DEVELOPMENT || vars.DOMAIN_NAME_PRODUCTION }}
    strategy:
      fail-fast: true
      matrix:
        environment: [development, production]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          #          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_APP_URL=https://${{ env.DOMAIN }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:latest
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:${{ github.sha }}

  deploy-development:
    name: Deploy to development
    environment:
      name: development
      url: https://ptatosol.com
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
    runs-on: ubuntu-latest
    needs:
      - release
      - build-and-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:dev-ci

      - name: Test Hostname Resolution
        run: |
          ping -c 3 sensepro-server-dev
          nc -zv sensepro-server-dev 22

      - name: Prepare SSH Directory
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          ssh-keyscan -p "22" -H "sensepro-server-dev" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh -o ConnectTimeout=30 "cicd@sensepro-server-dev" "echo 'SSH connection successful!'"

      - name: Configure Docker Stack
        run: docker context create remote --docker "host=ssh://cicd@sensepro-server-dev"

      - name: List Docker Contexts
        run: docker context ls

      - name: Use Remote Docker Context
        run: docker context use remote

      - name: Docker Stack Deploy
        env:
          ENVIRONMENT: development
          VERSION: ${{ env.VERSION }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        run: docker stack deploy -c docker-stack.yaml "${{ vars.DOCKER_STACK_NAME }}"

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Reload database
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@sensepro-server-dev:5432/${{ secrets.POSTGRES_DATABASE }}
        run: npm run db:dev

  deploy-production:
    name: Deploy to production
    environment:
      name: production
      url: https://sensepro.io
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
    runs-on: ubuntu-latest
    needs:
      - release
      - deploy-development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: create env file
        run: |
          echo "ENVIRONMENT=production" >> ./envfile
          echo "VERSION=${{ env.VERSION }}" >> ./envfile
          echo "DOMAIN_NAME=${{ vars.DOMAIN_NAME }}" >> ./envfile
          echo "BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}" >> ./envfile
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./envfile
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./envfile
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> ./envfile
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> ./envfile
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> ./envfile

      - name: Docker Stack Deploy
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.DOCKER_STACK_NAME }}
          file: docker-stack.yaml
          host: ${{ vars.DOMAIN_NAME }}
          user: cicd
          ssh_key: ${{ secrets.CICD_SSH_PRIVATE_KEY }}
          env_file: ./envfile
