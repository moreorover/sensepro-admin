name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN   }}
        with:
          publish: npm run publish

  build-and-push-image:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.published == 'true'
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
    strategy:
      fail-fast: true
      matrix:
        environment: [development, production]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          #          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ env.VERSION }}
            NEXT_PUBLIC_APP_URL=${{ vars.NEXT_PUBLIC_APP_URL }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:latest
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}-panel-${{ matrix.environment }}:${{ github.sha }}

  deploy-development:
    name: Deploy to development
    environment:
      name: development
      url: https://ptatosol.com
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: create env file
        run: |
          echo "ENVIRONMENT=development" >> ./envfile
          echo "VERSION=${{ env.VERSION }}" >> ./envfile
          echo "ACME_EMAIL=${{ vars.ACME_EMAIL }}" >> ./envfile
          echo "DOMAIN_NAME=${{ vars.DOMAIN_NAME }}" >> ./envfile
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./envfile
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./envfile
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> ./envfile
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> ./envfile
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> ./envfile

      - name: Docker Stack Deploy
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.DOCKER_STACK_NAME }}
          file: docker-stack.yaml
          host: ${{ vars.DOMAIN_NAME }}
          user: cicd
          ssh_key: ${{ secrets.CICD_SSH_PRIVATE_KEY }}
          env_file: ./envfile

  deploy-production:
    name: Deploy to production
    environment:
      name: production
      url: https://sensepro.io
    env:
      VERSION: ${{ fromJson(needs.release.outputs.publishedPackages)[0].version }}
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: create env file
        run: |
          echo "ENVIRONMENT=production" >> ./envfile
          echo "VERSION=${{ env.VERSION }}" >> ./envfile
          echo "ACME_EMAIL=${{ vars.ACME_EMAIL }}" >> ./envfile
          echo "DOMAIN_NAME=${{ vars.DOMAIN_NAME }}" >> ./envfile
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ./envfile
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ./envfile
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> ./envfile
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> ./envfile
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> ./envfile

      - name: Docker Stack Deploy
        uses: cssnr/stack-deploy-action@v1
        with:
          name: ${{ vars.DOCKER_STACK_NAME }}
          file: docker-stack.yaml
          host: ${{ vars.DOMAIN_NAME }}
          user: cicd
          ssh_key: ${{ secrets.CICD_SSH_PRIVATE_KEY }}
          env_file: ./envfile